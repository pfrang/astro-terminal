---

---

<div>
    <h2>Terminal Logs</h2>

    <pre
        id="log-container">
        <div id="log-content" />
        <form id="command-form">
            <input type="text" id="command-input" placeholder="Enter command" autofocus required />
        </form>
    </pre>
</div>

<style>
    pre {
        background: #000;
        color: #0f0;
        padding: 1rem;
        overflow-y: auto;
        height: 400px;
        display: flex;
        flex-direction: column;
    }

    #log-content {
        display: flex;
        flex-direction: column;
    }

    form {
        display: flex;
    }

    input {
        flex: 1;
        background: #000;
        color: #0f0;
        border: none;
        padding: 0.5rem;
        font-family: monospace;
        padding: 0px;
    }

    input:focus {
        outline: none;
    }
</style>

<script>
    let logs = [];
    let ws;

    function connectWebSocket() {
        if (
            ws &&
            (ws.readyState === WebSocket.OPEN ||
                ws.readyState === WebSocket.CONNECTING)
        ) {
            console.log("WebSocket is already open or connecting");
            return;
        }

        const protocol = window.location.protocol === "https:" ? "wss:" : "ws:";
        const host = window.location.host;
        const wsUrl = `${protocol}//${host}/ws/`;

        ws = new WebSocket(wsUrl);

        ws.onopen = () => {
            console.log("WebSocket connection established");
        };

        ws.onmessage = (event) => {
            console.log("Received message:", event.data);
            const timestamp = new Date().toLocaleTimeString();
            logs.push(`[${timestamp}] ${event.data}`);
            updateLogs();
        };

        ws.onclose = () => {
            console.log("WebSocket connection closed");
            const timestamp = new Date().toLocaleTimeString();
            logs.push(`[${timestamp}] Connection closed`);
            updateLogs();
        };

        ws.onerror = (error) => {
            console.error("WebSocket error:", error);
        };
    }

    function updateLogs() {
        const logContent = document.getElementById("log-content");
        if (logContent) {
            logContent.innerHTML = logs
                .map((log) => `<div>${log}</div>`)
                .join("");
            const logContainer = document.getElementById("log-container");
            logContainer.scrollTop = logContainer.scrollHeight;
        }
    }

    function sendCommand(event) {
        event.preventDefault();
        const commandInput = document.getElementById("command-input");
        const command = (commandInput as HTMLInputElement).value;
        if (ws && ws.readyState === WebSocket.OPEN) {
            console.log(`Sending command: ${command}`);
            ws.send(command);
            (commandInput as HTMLInputElement).value = "";
        } else {
            console.error("WebSocket is not connected");
        }
    }

    document.addEventListener("DOMContentLoaded", () => {
        const commandForm = document.getElementById("command-form");
        commandForm.addEventListener("submit", sendCommand);

        const commandInput = document.getElementById("command-input");
        commandInput.addEventListener("keydown", (event) => {
            if (event.key === "Enter") {
                event.preventDefault();
                commandForm.dispatchEvent(new Event("submit"));
            }
        });

        if (typeof window !== "undefined") {
            console.log("Running in the browser");
            if (!ws || ws.readyState === WebSocket.CLOSED) {
                connectWebSocket();
            }
        }
    });
</script>
